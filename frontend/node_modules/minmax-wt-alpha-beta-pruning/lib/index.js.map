{"version":3,"sources":["../src/index.js"],"names":["exports","minmax"],"mappings":"AACA;AACA;AACA;AACA;AACI;;;;AAIJ;AACA;AACA;AACA;AACA;;;AAWA;;AAEAA,QAAQC,MAAR","file":"index.js","sourcesContent":["//@flow\n'use strict';\n// The rationale behind using this idiom is described in:\n//     http://stackoverflow.com/a/36628148/274677\n//\n    /* not needed in this project:\n    if (!global._babelPolyfill) // https://github.com/s-panferov/awesome-typescript-loader/issues/121\n        require('babel-polyfill'); // this is important as Babel only transforms syntax (e.g. arrow functions)\n    */\n// so you need this in order to support new globals or (in my experience) well-known Symbols, e.g. the following:\n//\n//     console.log(Object[Symbol.hasInstance]);\n//\n// ... will print 'undefined' without the the babel-polyfill being required.\n\n\nimport type {\n    IGameRules, EvaluateFT, ListMovesFT, NextStateFT, MinMaxFT, TMinMaxResult\n} from './minmax-interface.js'\n\nexport type {\n    IGameRules, EvaluateFT, ListMovesFT, NextStateFT, MinMaxFT, TMinMaxResult \n};\n\nimport {minmax} from './minmax-impl.js';\n\nexports.minmax  = minmax;\n"]}